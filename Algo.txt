Here, instead of computing the left and right parts seperately, we may think of some way 
to do it in one iteration. From the figure in dynamic programming approach, notice that as long as 
right_max[i]>left_max[i]\text{right\_max}[i]>\text{left\_max}[i]right_max[i]>left_max[i] (from element 0 to 6), 
the water trapped depends upon the left_max, and similar is the case when 
left_max[i]>right_max[i]\text{left\_max}[i]>\text{right\_max}[i]left_max[i]>right_max[i] (from element 8 to 11). 
So, we can say that if there is a larger bar at one end (say right), we are assured that the water trapped would 
be dependant on height of bar in current direction (from left to right). As soon as we find the bar at other end 
(right) is smaller, we start iterating in opposite direction (from right to left).

We must maintain left_max\text{left\_max}left_max and right_max\text{right\_max}right_max during the iteration,
but now we can do it in one iteration using 2 pointers, switching between the two.
